name: Rust CI

on:
  push:
    branches: [main]
  pull_request:

env:
  PDS_EMAIL_FROM_ADDRESS: "noreply@blacksky.app"
  PDS_EMAIL_FROM_NAME: "noreply"
  PDS_MODERATION_EMAIL_FROM_NAME: "noreply"
  PDS_MODERATION_EMAIL_FROM_ADDRESS: "noreply@blacksky.app"
  PDS_HOSTNAME: "localho.st"
  PDS_SERVICE_DID: "did:web:localho.st"
  PDS_ADMIN_PASS: ${{ secrets.PDS_ADMIN_PASS }}
  PDS_JWT_KEY_K256_PRIVATE_KEY_HEX: ${{ secrets.PDS_JWT_KEY_K256_PRIVATE_KEY_HEX }}
  PDS_MAILGUN_API_KEY: ${{ secrets.PDS_MAILGUN_API_KEY }}
  PDS_MAILGUN_DOMAIN: ${{ secrets.PDS_MAILGUN_DOMAIN }}
  PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX: ${{ secrets.PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX }}
  PDS_REPO_SIGNING_KEY_K256_PRIVATE_KEY_HEX: ${{ secrets.PDS_REPO_SIGNING_KEY_K256_PRIVATE_KEY_HEX }}

jobs:
  # First determine which workspace packages need to be processed
  determine-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set-packages.outputs.packages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set packages
        id: set-packages
        run: |
          # Extract all packages from Cargo.toml
          PACKAGES=$(grep -E 'members\s*=\s*\[' Cargo.toml | sed -e 's/.*\[\s*//' -e 's/\s*\].*//' -e 's/,//g' | tr -d '"' | sed 's/\s\+/\n/g')
          
          # Define packages to skip
          SKIP_PACKAGES=("cypher/frontend" "cypher/backend" "rsky-cryptorsky-feedgen")
          
          # Filter out packages to skip
          FILTERED_PACKAGES=()
          for pkg in $PACKAGES; do
            skip=false
            for skip_pkg in "${SKIP_PACKAGES[@]}"; do
              if [[ "$pkg" == "$skip_pkg" ]]; then
                skip=true
                break
              fi
            done
            if [[ "$skip" == "false" ]]; then
              FILTERED_PACKAGES+=("$pkg")
            fi
          done
          
          # Convert to JSON array for matrix
          JSON_PACKAGES=$(printf '%s\n' "${FILTERED_PACKAGES[@]}" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "packages=$JSON_PACKAGES" >> $GITHUB_OUTPUT
          echo "Found packages (excluding skipped ones): $JSON_PACKAGES"

  # Parallel check job for each package
  check:
    needs: determine-packages
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.determine-packages.outputs.packages) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.package }}
      - name: Run cargo check for ${{ matrix.package }}
        run: cargo check -p ${{ matrix.package }}

  # Parallel build job for each package
  build:
    needs: check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.determine-packages.outputs.packages) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.package }}
      - name: Run cargo build for ${{ matrix.package }}
        run: cargo build --release -p ${{ matrix.package }}

  # Parallel test job for each package
  test:
    needs: check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.determine-packages.outputs.packages) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.package }}
      - name: Run cargo test for ${{ matrix.package }}
        run: cargo test -p ${{ matrix.package }}

  # Run formatting check on the entire workspace
  formatting:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Run cargo fmt
        run: cargo fmt -- --check

  # Optional: Add a final job that depends on all tests to signal success
  ci-success:
    runs-on: ubuntu-latest
    needs: [check, build, test, formatting]
    steps:
      - name: CI Success
        run: echo "All CI jobs passed!"